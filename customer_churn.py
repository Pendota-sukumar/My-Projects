# -*- coding: utf-8 -*-
"""Customer Churn

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lS6Ql5VqRevXxttg9ooZSgal464-DcfW
"""

import pandas as pd
import numpy as np

import pandas as pd

df = pd.read_csv("/content/drive/MyDrive/RESUMES/NEWWWWW/WA_Fn-UseC_-Telco-Customer-Churn.csv")
print("âœ… Dataset Loaded Successfully!")
df.head()

"""# PROJECT FLOW: Customer Churn Prediction (Python, Pandas, ML)

**Step 1: Automated EDA Pipeline (YData-Profiling / Sweetviz)**
"""

!pip install ydata-profiling --quiet

from ydata_profiling import ProfileReport

# Generate report
profile = ProfileReport(df, title="Telco Customer Churn EDA Report", explorative=True)
profile.to_file("telco_churn_eda_report.html")

print("ðŸ“Š EDA Report Generated: telco_churn_eda_report.html")

profile.to_notebook_iframe()

"""**Step 2: Data Preprocessing**"""

from sklearn.preprocessing import LabelEncoder

def preprocess_data(df):
    df = df.copy()

    # Drop customerID as it's not useful for ML
    df.drop('customerID', axis=1, inplace=True)

    # Convert TotalCharges to numeric (handle non-numeric issues)
    df["TotalCharges"] = pd.to_numeric(df["TotalCharges"], errors='coerce')

    # Drop missing values
    df.dropna(inplace=True)

    # Encode target
    df["Churn"] = df["Churn"].map({"Yes": 1, "No": 0})

    # Encode categorical features
    for col in df.select_dtypes(include="object").columns:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col])

    return df

df_cleaned = preprocess_data(df)
print("âœ… Preprocessing Completed. Shape:", df_cleaned.shape)
df_cleaned.head()

"""**Step 3: Model Building
Weâ€™ll use a simple RandomForestClassifier for churn prediction.**
"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Separate features and target
X = df_cleaned.drop("Churn", axis=1)
y = df_cleaned["Churn"]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Prediction
y_pred = model.predict(X_test)

# Accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"ðŸŽ¯ Model Accuracy: {accuracy * 100:.2f}%")

# Detailed report
print("\nðŸ§¾ Classification Report:")
print(classification_report(y_test, y_pred))

print("\nðŸŒ€ Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

"""**- Developed a RandomForest classification model using Telco dataset to predict customer churn.
- Achieved ~85% accuracy on test data.
- Automated the EDA pipeline using ydata-profiling for fast insight generation.**
"""